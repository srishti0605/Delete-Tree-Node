/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void dfs(TreeNode* root, vector<TreeNode*>&res, TreeNode* parent,int nodeToBeRemoved){
        if(!root)
        return;

        if(root->val == nodeToBeRemoved){
            if(parent && parent->left==root)parent->left=NULL;
            if(parent && parent->right==root)parent->right=NULL;

            if(root->left && (root->left)->val != nodeToBeRemoved)
            res.push_back(root->left);
            
            if(root->right && (root->right)->val != nodeToBeRemoved)
            res.push_back(root->right);
            
        }
        dfs(root->left,res,root,nodeToBeRemoved);
        dfs(root->right,res,root,nodeToBeRemoved);
    }
    
    vector<TreeNode*> delNodes(TreeNode* root, int nodeToBeRemoved) {
     
        vector<TreeNode*>res;

        if(root && root->val != nodeToBeRemoved){
            res.push_back(root);
        }
        dfs(root,res,NULL,nodeToBeRemoved);
        return res;
    }
};
